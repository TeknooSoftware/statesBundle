# src/Resources/config/services.yml
parameters:
  #bundle services class names
  teknoo.states.service.composer.finder.class: Teknoo\Bundle\StatesBundle\Service\ComposerFinderService
  teknoo.states.service.factory.repository.class: ArrayObject
  teknoo.states.service.bootstrap.class: Teknoo\Bundle\StatesBundle\Service\BootstrapService

  #doctrine listener
  teknoo.states.listener.doctrine.load.class.meta.class: Teknoo\Bundle\StatesBundle\Doctrine\LoadClassMetaListener

  #states loaders classes
  teknoo.states.loader.class: Teknoo\States\Loader\LoaderComposer
  teknoo.states.finder.class: Teknoo\States\Loader\FinderComposerIntegrated

  #default parameter for bootstraping
  teknoo.states.bootstraping.autoloader.register.function: "spl_autoload_register"
  teknoo.states.bootstraping.factory.repository.class.name: "%teknoo.states.service.factory.repository.class%"
  teknoo.states.bootstraping.loader.class.name: "%teknoo.states.loader.class%"
  teknoo.states.bootstraping.finder.class.name: "%teknoo.states.finder.class%"

  #Tokenizer for lifecyclable behavior
  teknoo.states.lifecyclable.tokenizer.class: Teknoo\States\LifeCycle\Tokenization\Tokenizer

  #Manager for lifecyclable behavior
  teknoo.states.lifecyclable.manager.class: Teknoo\States\LifeCycle\Scenario\Manager

  #Observer for lifecyclable behavior with factory
  teknoo.states.lifecyclable.observer.class: Teknoo\States\LifeCycle\Observing\Observer
  teknoo.states.lifecyclable.observed.factory.class: Teknoo\States\LifeCycle\Observing\ObservedFactory
  teknoo.states.lifecyclable.observed.class: Teknoo\States\LifeCycle\Observing\Observed
  teknoo.states.lifecyclable.event.class: Teknoo\States\LifeCycle\Event\Event
  teknoo.states.lifecyclable.trace.class: Teknoo\States\LifeCycle\Trace\Trace

  #default parameter for states lifecyclable behaior
  teknoo.states.lifecyclable.observed.class.name: "%teknoo.states.lifecyclable.observed.class%"
  teknoo.states.lifecyclable.event.class.name: "%teknoo.states.lifecyclable.event.class%"
  teknoo.states.lifecyclable.trace.class.name: "%teknoo.states.lifecyclable.trace.class%"

services:
  #composer finder
  teknoo.states.service.composer.finder:
    class: "%teknoo.states.service.composer.finder.class%"
    public: false

  teknoo.states.service.factory.repository:
    class: "%teknoo.states.bootstraping.factory.repository.class.name%"
    public: false

  teknoo.states.listener.doctrine.load.class.meta:
    class: "%teknoo.states.listener.doctrine.load.class.meta.class%"
    public: false
    tags:
      - { name: doctrine.event_listener, event: loadClassMetadata }

  teknoo.states.service.bootstrap:
    class: "%teknoo.states.service.bootstrap.class%"
    public: false
    arguments:
      - "@teknoo.states.service.composer.finder"
      - "@teknoo.states.service.factory.repository"
      - "@teknoo.states.listener.doctrine.load.class.meta"
      - "%teknoo.states.bootstraping.autoloader.register.function%"

  teknoo.states.loader:
    class: "%teknoo.states.bootstraping.loader.class.name%"
    factory_service: teknoo.states.service.bootstrap
    factory_method: getLoaderInstance
    arguments:
      - "%teknoo.states.bootstraping.loader.class.name%"
      - "%teknoo.states.bootstraping.finder.class.name%"

  teknoo.states.lifecyclable.service.tokenizer:
    class: "%teknoo.states.lifecyclable.tokenizer.class%"
    public: false

  teknoo.states.lifecyclable.service.manager:
    class: "%teknoo.states.lifecyclable.manager.class%"
    arguments:
      - @event_dispatcher

  teknoo.states.lifecyclable.service.observed.factory:
    class: "%teknoo.states.lifecyclable.observed.factory.class%"
    public: false
    arguments:
      - "%teknoo.states.lifecyclable.observed.class.name%"
      - "%teknoo.states.lifecyclable.event.class.name%"
      - "%teknoo.states.lifecyclable.trace.class.name%"

  teknoo.states.lifecyclable.service.observer:
    class: "%teknoo.states.lifecyclable.observer.class%"
    arguments:
      - @teknoo.states.lifecyclable.service.observed.factory
    calls:
      - [ addEventDispatcher, [@event_dispatcher]]
      - [ setTokenizer, [@teknoo.states.lifecyclable.service.tokenizer]]
